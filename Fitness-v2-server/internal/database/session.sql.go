// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: session.sql

package database

import (
	"context"
	"database/sql"
	"encoding/json"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
  user_id, 
  session_token, 
  session_data
) 
VALUES (
  $1, 
  $2, 
  $3
) 
RETURNING id, user_id, created_at, updated_at, expires_at, session_token, session_data
`

type CreateSessionParams struct {
	UserID       uuid.UUID
	SessionToken string
	SessionData  json.RawMessage
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession, arg.UserID, arg.SessionToken, arg.SessionData)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.SessionToken,
		&i.SessionData,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions
WHERE session_token = $1
`

func (q *Queries) DeleteSession(ctx context.Context, sessionToken string) error {
	_, err := q.db.ExecContext(ctx, deleteSession, sessionToken)
	return err
}

const getSessionByID = `-- name: GetSessionByID :one
SELECT sessions.id, sessions.user_id, sessions.created_at, sessions.updated_at, sessions.expires_at, sessions.session_token, sessions.session_data, users.id, users.email, users.password_hash, users.username, users.image_url, users.created_at, users.updated_at, users.role
FROM sessions
LEFT JOIN users ON users.id = sessions.user_id
WHERE sessions.id = $1
`

type GetSessionByIDRow struct {
	ID           uuid.UUID
	UserID       uuid.UUID
	CreatedAt    sql.NullTime
	UpdatedAt    sql.NullTime
	ExpiresAt    sql.NullTime
	SessionToken string
	SessionData  json.RawMessage
	ID_2         uuid.NullUUID
	Email        sql.NullString
	PasswordHash []byte
	Username     sql.NullString
	ImageUrl     sql.NullString
	CreatedAt_2  sql.NullTime
	UpdatedAt_2  sql.NullTime
	Role         NullUserRole
}

func (q *Queries) GetSessionByID(ctx context.Context, id uuid.UUID) (GetSessionByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getSessionByID, id)
	var i GetSessionByIDRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.SessionToken,
		&i.SessionData,
		&i.ID_2,
		&i.Email,
		&i.PasswordHash,
		&i.Username,
		&i.ImageUrl,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
		&i.Role,
	)
	return i, err
}

const getSessionByToken = `-- name: GetSessionByToken :one
SELECT sessions.id, sessions.user_id, sessions.created_at, sessions.updated_at, sessions.expires_at, sessions.session_data, users.id, users.email, users.username, users.image_url, users.created_at, users.updated_at, users.role
FROM sessions
LEFT JOIN users ON users.id = sessions.user_id
WHERE sessions.session_token = $1
`

type GetSessionByTokenRow struct {
	ID          uuid.UUID
	UserID      uuid.UUID
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
	ExpiresAt   sql.NullTime
	SessionData json.RawMessage
	ID_2        uuid.NullUUID
	Email       sql.NullString
	Username    sql.NullString
	ImageUrl    sql.NullString
	CreatedAt_2 sql.NullTime
	UpdatedAt_2 sql.NullTime
	Role        NullUserRole
}

func (q *Queries) GetSessionByToken(ctx context.Context, sessionToken string) (GetSessionByTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getSessionByToken, sessionToken)
	var i GetSessionByTokenRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.SessionData,
		&i.ID_2,
		&i.Email,
		&i.Username,
		&i.ImageUrl,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
		&i.Role,
	)
	return i, err
}

const refreshSession = `-- name: RefreshSession :one
UPDATE sessions
SET updated_at = NOW(),
    expires_at = NOW() + '1 hour'
WHERE session_token = $1
RETURNING id, user_id, created_at, updated_at, expires_at, session_token, session_data
`

func (q *Queries) RefreshSession(ctx context.Context, sessionToken string) (Session, error) {
	row := q.db.QueryRowContext(ctx, refreshSession, sessionToken)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.SessionToken,
		&i.SessionData,
	)
	return i, err
}
