// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: notification.sql

package database

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
)

const createNotification = `-- name: CreateNotification :exec
INSERT INTO notifications (
  type, 
  data, 
  user_id
) 
VALUES (
  $1, 
  $2, 
  $3
)
`

type CreateNotificationParams struct {
	Type   NotificationType
	Data   json.RawMessage
	UserID uuid.UUID
}

func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) error {
	_, err := q.db.ExecContext(ctx, createNotification, arg.Type, arg.Data, arg.UserID)
	return err
}

const getNewUserNotifications = `-- name: GetNewUserNotifications :many
SELECT id, type, data, is_new, created_at, updated_at, user_id FROM notifications
WHERE user_id = $1
AND is_new = TRUE
ORDER BY created_at DESC
`

func (q *Queries) GetNewUserNotifications(ctx context.Context, userID uuid.UUID) ([]Notification, error) {
	rows, err := q.db.QueryContext(ctx, getNewUserNotifications, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Data,
			&i.IsNew,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markNotificationAsRead = `-- name: MarkNotificationAsRead :exec
UPDATE notifications
SET is_new = FALSE
WHERE id = $1
AND user_id = $2
`

type MarkNotificationAsReadParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) MarkNotificationAsRead(ctx context.Context, arg MarkNotificationAsReadParams) error {
	_, err := q.db.ExecContext(ctx, markNotificationAsRead, arg.ID, arg.UserID)
	return err
}
