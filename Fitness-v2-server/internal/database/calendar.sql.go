// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: calendar.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const getCalendarMealsByDate = `-- name: GetCalendarMealsByDate :many

SELECT m.name, m.id
FROM meal_consumed AS mc 
LEFT JOIN meals AS m 
ON m.id = mc.meal_id 
WHERE mc.date=$1
AND m.user_id=$2
`

type GetCalendarMealsByDateParams struct {
	Date   time.Time
	UserID uuid.UUID
}

type GetCalendarMealsByDateRow struct {
	Name sql.NullString
	ID   uuid.NullUUID
}

func (q *Queries) GetCalendarMealsByDate(ctx context.Context, arg GetCalendarMealsByDateParams) ([]GetCalendarMealsByDateRow, error) {
	rows, err := q.db.QueryContext(ctx, getCalendarMealsByDate, arg.Date, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCalendarMealsByDateRow
	for rows.Next() {
		var i GetCalendarMealsByDateRow
		if err := rows.Scan(&i.Name, &i.ID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCalendarNutritionByDate = `-- name: GetCalendarNutritionByDate :one
SELECT
  COALESCE(SUM(fi.calories * rmf.amount), 0) AS total_calories,
  COALESCE(SUM(fi.fat * rmf.amount), 0) AS total_fat,
  COALESCE(SUM(fi.protein * rmf.amount), 0) AS total_protein,
  COALESCE(SUM(fi.carbs * rmf.amount), 0) AS total_carbs
  FROM meal_consumed AS mc
  LEFT JOIN rel_meal_food AS rmf ON mc.meal_id = rmf.meal_id
  LEFT JOIN food_items AS fi ON rmf.food_item_id = fi.id
  WHERE mc.user_id = $2 
  AND mc.date = $1
  GROUP BY mc.date
`

type GetCalendarNutritionByDateParams struct {
	Date   time.Time
	UserID uuid.UUID
}

type GetCalendarNutritionByDateRow struct {
	TotalCalories interface{}
	TotalFat      interface{}
	TotalProtein  interface{}
	TotalCarbs    interface{}
}

func (q *Queries) GetCalendarNutritionByDate(ctx context.Context, arg GetCalendarNutritionByDateParams) (GetCalendarNutritionByDateRow, error) {
	row := q.db.QueryRowContext(ctx, getCalendarNutritionByDate, arg.Date, arg.UserID)
	var i GetCalendarNutritionByDateRow
	err := row.Scan(
		&i.TotalCalories,
		&i.TotalFat,
		&i.TotalProtein,
		&i.TotalCarbs,
	)
	return i, err
}
