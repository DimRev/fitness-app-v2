// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: meal.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const getMealByID = `-- name: GetMealByID :one
SELECT 
  m.id, m.name, m.description, m.image_url, m.created_at, m.updated_at, m.user_id, 
  COALESCE(SUM(fi.calories * rmf.amount), 0) AS total_calories,
  COALESCE(SUM(fi.fat * rmf.amount), 0) AS total_fat,
  COALESCE(SUM(fi.protein * rmf.amount), 0) AS total_protein,
  COALESCE(SUM(fi.carbs * rmf.amount), 0) AS total_carbs
FROM meals m
LEFT JOIN rel_meal_food rmf ON m.id = rmf.meal_id
LEFT JOIN food_items fi ON rmf.food_item_id = fi.id
WHERE m.id = $1
GROUP BY m.id
`

type GetMealByIDRow struct {
	ID            uuid.UUID
	Name          string
	Description   sql.NullString
	ImageUrl      sql.NullString
	CreatedAt     sql.NullTime
	UpdatedAt     sql.NullTime
	UserID        uuid.UUID
	TotalCalories interface{}
	TotalFat      interface{}
	TotalProtein  interface{}
	TotalCarbs    interface{}
}

func (q *Queries) GetMealByID(ctx context.Context, id uuid.UUID) (GetMealByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getMealByID, id)
	var i GetMealByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.TotalCalories,
		&i.TotalFat,
		&i.TotalProtein,
		&i.TotalCarbs,
	)
	return i, err
}

const getMealsByUserID = `-- name: GetMealsByUserID :many
SELECT 
  m.id, m.name, m.description, m.image_url, m.created_at, m.updated_at, m.user_id, 
  COALESCE(SUM(fi.calories * rmf.amount), 0) AS total_calories,
  COALESCE(SUM(fi.fat * rmf.amount), 0) AS total_fat,
  COALESCE(SUM(fi.protein * rmf.amount), 0) AS total_protein,
  COALESCE(SUM(fi.carbs * rmf.amount), 0) AS total_carbs
FROM meals m
LEFT JOIN rel_meal_food rmf ON m.id = rmf.meal_id
LEFT JOIN food_items fi ON rmf.food_item_id = fi.id
WHERE m.user_id = $1
GROUP BY m.id
ORDER BY m.created_at DESC
LIMIT $2
OFFSET $3
`

type GetMealsByUserIDParams struct {
	UserID uuid.UUID
	Limit  int32
	Offset int32
}

type GetMealsByUserIDRow struct {
	ID            uuid.UUID
	Name          string
	Description   sql.NullString
	ImageUrl      sql.NullString
	CreatedAt     sql.NullTime
	UpdatedAt     sql.NullTime
	UserID        uuid.UUID
	TotalCalories interface{}
	TotalFat      interface{}
	TotalProtein  interface{}
	TotalCarbs    interface{}
}

func (q *Queries) GetMealsByUserID(ctx context.Context, arg GetMealsByUserIDParams) ([]GetMealsByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getMealsByUserID, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMealsByUserIDRow
	for rows.Next() {
		var i GetMealsByUserIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ImageUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.TotalCalories,
			&i.TotalFat,
			&i.TotalProtein,
			&i.TotalCarbs,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertMeal = `-- name: InsertMeal :one
INSERT INTO meals (
  name, 
  description, 
  image_url, 
  user_id
)
VALUES (
  $1, $2, $3, $4
)
RETURNING id, name, description, image_url, created_at, updated_at, user_id
`

type InsertMealParams struct {
	Name        string
	Description sql.NullString
	ImageUrl    sql.NullString
	UserID      uuid.UUID
}

func (q *Queries) InsertMeal(ctx context.Context, arg InsertMealParams) (Meal, error) {
	row := q.db.QueryRowContext(ctx, insertMeal,
		arg.Name,
		arg.Description,
		arg.ImageUrl,
		arg.UserID,
	)
	var i Meal
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const insertMealFoodItems = `-- name: InsertMealFoodItems :exec
INSERT INTO rel_meal_food (
  meal_id, 
  food_item_id, 
  user_id, 
  amount
) 
VALUES ($1, unnest($2::uuid[]), $3, unnest($4::int[]))
`

type InsertMealFoodItemsParams struct {
	MealID  uuid.UUID
	Column2 []uuid.UUID
	UserID  uuid.UUID
	Column4 []int32
}

func (q *Queries) InsertMealFoodItems(ctx context.Context, arg InsertMealFoodItemsParams) error {
	_, err := q.db.ExecContext(ctx, insertMealFoodItems,
		arg.MealID,
		pq.Array(arg.Column2),
		arg.UserID,
		pq.Array(arg.Column4),
	)
	return err
}
