// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: support_ticket.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createSupportTicket = `-- name: CreateSupportTicket :one
INSERT INTO support_tickets (
  support_ticket_type,
  title,
  description,
  owner_id
) 
VALUES (
  $1,
  $2,
  $3,
  $4
)
RETURNING id, support_ticket_type, title, description, is_closed, created_at, updated_at, owner_id, handler_id
`

type CreateSupportTicketParams struct {
	SupportTicketType SupportTicketTypes
	Title             string
	Description       string
	OwnerID           uuid.UUID
}

func (q *Queries) CreateSupportTicket(ctx context.Context, arg CreateSupportTicketParams) (SupportTicket, error) {
	row := q.db.QueryRowContext(ctx, createSupportTicket,
		arg.SupportTicketType,
		arg.Title,
		arg.Description,
		arg.OwnerID,
	)
	var i SupportTicket
	err := row.Scan(
		&i.ID,
		&i.SupportTicketType,
		&i.Title,
		&i.Description,
		&i.IsClosed,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OwnerID,
		&i.HandlerID,
	)
	return i, err
}

const getSupportTickets = `-- name: GetSupportTickets :many
SELECT id, support_ticket_type, title, description, is_closed, created_at, updated_at, owner_id, handler_id FROM support_tickets
LIMIT $1
OFFSET $2
`

type GetSupportTicketsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetSupportTickets(ctx context.Context, arg GetSupportTicketsParams) ([]SupportTicket, error) {
	rows, err := q.db.QueryContext(ctx, getSupportTickets, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SupportTicket
	for rows.Next() {
		var i SupportTicket
		if err := rows.Scan(
			&i.ID,
			&i.SupportTicketType,
			&i.Title,
			&i.Description,
			&i.IsClosed,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.OwnerID,
			&i.HandlerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSupportTicketsRowCount = `-- name: GetSupportTicketsRowCount :one
SELECT COUNT(*) AS total_rows
FROM support_tickets
`

func (q *Queries) GetSupportTicketsRowCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getSupportTicketsRowCount)
	var total_rows int64
	err := row.Scan(&total_rows)
	return total_rows, err
}
