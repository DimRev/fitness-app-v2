// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: score.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createScore = `-- name: CreateScore :one
INSERT INTO score (
  score,
  is_approved,
  details,
  user_id
)
VALUES (
  $1,
  $2,
  $3,
  $4
)
RETURNING id, score, is_approved, details, created_at, updated_at, user_id
`

type CreateScoreParams struct {
	Score      int32
	IsApproved sql.NullBool
	Details    sql.NullString
	UserID     uuid.UUID
}

func (q *Queries) CreateScore(ctx context.Context, arg CreateScoreParams) (Score, error) {
	row := q.db.QueryRowContext(ctx, createScore,
		arg.Score,
		arg.IsApproved,
		arg.Details,
		arg.UserID,
	)
	var i Score
	err := row.Scan(
		&i.ID,
		&i.Score,
		&i.IsApproved,
		&i.Details,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const getApprovedScoreSumByUserID = `-- name: GetApprovedScoreSumByUserID :one
SELECT COALESCE(SUM(score), 0)::int FROM score WHERE user_id = $1 AND is_approved = true
`

func (q *Queries) GetApprovedScoreSumByUserID(ctx context.Context, userID uuid.UUID) (int32, error) {
	row := q.db.QueryRowContext(ctx, getApprovedScoreSumByUserID, userID)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const getPendingScoreSumByUserID = `-- name: GetPendingScoreSumByUserID :one
SELECT COALESCE(SUM(score), 0)::int FROM score WHERE user_id = $1 AND is_approved = false
`

func (q *Queries) GetPendingScoreSumByUserID(ctx context.Context, userID uuid.UUID) (int32, error) {
	row := q.db.QueryRowContext(ctx, getPendingScoreSumByUserID, userID)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const getScoreRowsByUserID = `-- name: GetScoreRowsByUserID :many
SELECT id, score, is_approved, details, created_at, updated_at, user_id FROM score WHERE user_id = $1
`

func (q *Queries) GetScoreRowsByUserID(ctx context.Context, userID uuid.UUID) ([]Score, error) {
	rows, err := q.db.QueryContext(ctx, getScoreRowsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Score
	for rows.Next() {
		var i Score
		if err := rows.Scan(
			&i.ID,
			&i.Score,
			&i.IsApproved,
			&i.Details,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalScoreSumByUserID = `-- name: GetTotalScoreSumByUserID :one
SELECT COALESCE(SUM(score), 0)::int FROM score WHERE user_id = $1
`

func (q *Queries) GetTotalScoreSumByUserID(ctx context.Context, userID uuid.UUID) (int32, error) {
	row := q.db.QueryRowContext(ctx, getTotalScoreSumByUserID, userID)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}
